from queue import PriorityQueue

# Define the goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the empty tile

# Define the heuristic function (Manhattan distance)
def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                row = (state[i][j] - 1) // 3
                col = (state[i][j] - 1) % 3
                distance += abs(row - i) + abs(col - j)
    return distance

# Define the A* search algorithm
def a_star(start_state):
    frontier = PriorityQueue()
    frontier.put((0, start_state))
    came_from = {}
    cost_so_far = {tuple(map(tuple, start_state)): 0}

    while not frontier.empty():
        current_cost, current_state = frontier.get()

        if current_state == goal_state:
            break

        for next_state in get_neighbors(current_state):
            new_cost = cost_so_far[tuple(map(tuple, current_state))] + 1
            if tuple(map(tuple, next_state)) not in cost_so_far or new_cost < cost_so_far[tuple(map(tuple, next_state))]:
                cost_so_far[tuple(map(tuple, next_state))] = new_cost
                priority = new_cost + heuristic(next_state)
                frontier.put((priority, next_state))
                came_from[tuple(map(tuple, next_state))] = current_state

    path = []
    current_state = tuple(map(tuple, goal_state))
    while current_state != tuple(map(tuple, start_state)):
        path.append(current_state)
        current_state = came_from[current_state]
    path.append(start_state)
    path.reverse()

    return path

# Function to get neighboring states by moving the empty tile
def get_neighbors(state):
    neighbors = []
    empty_row, empty_col = get_empty_tile_location(state)
    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
        new_row, new_col = empty_row + dr, empty_col + dc
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = [list(row) for row in state]
            new_state[empty_row][empty_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[empty_row][empty_col]
            neighbors.append(new_state)
    return neighbors

# Function to get the location of the empty tile in the state
def get_empty_tile_location(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Function to print the path
def print_path(path):
    for i, state in enumerate(path):
        print("Step:", i)
        for row in state:
            print(row)
        print()

# Example usage
start_state = [[1, 2, 3],
               [4, 5, 6],
               [0, 7, 8]]  # Example initial state
path = a_star(start_state)
print_path(path)
